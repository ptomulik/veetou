#!/usr/bin/env python
# coding=utf8

import re
import fileinput
import argparse

def precompile(**kw):
    global _ln6re, _ln7re, _ln8re, _lnXre
    _ln6re = re.compile(_ln6re, **kw)
    _ln7re = re.compile(_ln7re, **kw)
    _ln8re = re.compile(_ln8re, **kw)
    _lnXre = re.compile(_lnXre, **kw)

def match(expr, s, **kw):
    m = expr.match(s, **kw)
    if m is None:
        return None
    return m.groupdict()

argpar = argparse.ArgumentParser()
argpar.add_argument('inputfile', type=str, metavar='FILE', nargs='*', help='input file (txt) to be processed')
argpar.add_argument('-f', type=str, dest='file', metavar='NAME', help='name of the original (pdf) file')
argpar.add_argument('-p', type=int, dest='page', metavar='N', help='page number that is being processed')
argpar.add_argument('-c', dest='columns', action='store_true', help='print column headers')
args = argpar.parse_args()

_ln6re = r'^\s*(?P<student_id>\d+)\s*-\s*(?:(?P<first_name>\S+(\s+\S+)*)\s+)?(?P<last_name>\S+)\s*$'
_ln7re = r'^\s*Semestr akademicki:\s*(?P<semester>\S+(?:\s+\S+)*)\s*Kierunek:\s*(?P<course>\S+(\s+\S+)*)\s*$'
_ln8re = r'^\s*Semestr studiów:\s*(?P<term>\S+(?:\s+\S+)*)\s*Specjalność:\s*(?P<speciality>\S+(?:\s+\S+)*)\s*$'
_lnXre = r'^\s*(?P<code>ML\.\S+)(?:\s+\S+)*\s+(?P<w>\d+)\s+(?P<c>\d+)\s+(?P<l>\d+)\s+(?P<p>\d+)\s+(?P<s>\d+)\s+(?P<credit_type>Egz\.?|Zal\.?)\s+(?P<ects>\d+)(\s+\S+)*\s+(?P<grade>\S{2,5})\s+(?P<date>\d\d\.\d\d\.\d\d\d\d)\s*$'

precompile()

headlines = dict()
found_headlines = set()

headlines_map = {
    'ln6' : _ln6re,
    'ln7' : _ln7re,
    'ln8' : _ln8re
}

order = [
    'student_id',
    'first_name',
    'last_name',
    'semester',
    'course',
    'term',
    'speciality',
    'code',
    'w',
    'c',
    'l',
    'p',
    's',
    'credit_type',
    'ects',
    'grade',
    'date',
]
columns = {
    'student_id'    : 'Nr albumu',
    'first_name'    : 'Imię',
    'last_name'     : 'Nazwisko',
    'semester'      : 'Semestr akademicki',
    'course'        : 'Kierunek',
    'term'          : 'Semestr studiów',
    'speciality'    : 'Specjalność',
    'code'          : 'Nr katalogowy (VERBIS)',
    'w'             : 'W',
    'c'             : 'C',
    'l'             : 'L',
    'p'             : 'P',
    's'             : 'S',
    'credit_type'   : 'Forma zalicz',
    'ects'          : 'ECTS',
    'grade'         : 'Ocena',
    'date'          : 'Data',
}

if args.file:
    order.append('file')
    columns['file'] = 'Plik'
    headlines['file'] = args.file

if args.page:
    order.append('page')
    columns['page'] = 'Strona'
    headlines['page'] = str(args.page)

if args.columns:
    print(';'.join([columns[k] for k in order ]))

lineno = 0
lines = []
rows = []
rowlines = []
for line in fileinput.input(args.inputfile):
    lineno = lineno + 1
    lines.append(line)
    found_headline = False
    # First look for heading informations
    for (p_id, p_re) in headlines_map.items():
        if p_id not in found_headlines:
            m = match(p_re, line)
            if m:
                headlines.update(m)
                found_headlines.update(p_id)
                found_headline = True
                break
    if found_headline:
        continue
    m = match(_lnXre, line)
    if m:
        d = m.copy()
        d.update(headlines)
        row = [ d[k] for k in order ]
        rows.append(row)
        rowlines.append(lineno-1)

for row in rows:
    print(';'.join(row))

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=python expandtab tabstop=4 shiftwidth=4:
